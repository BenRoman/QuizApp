@model QuizApp.ViewModel.Managing.TestingUrlViewModel

@{
    ViewBag.Title = "Quiz";
}

<h2>Quiz</h2>

<div id="tmp">
    <h4>TestingUrlViewModel</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.UrlInstance)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.UrlInstance)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Guid)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Guid)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TestGuid)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TestGuid)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TestName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TestName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Interviewee)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Interviewee)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.NumberOfRuns)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.NumberOfRuns)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AllowedStartDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AllowedStartDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AllowedEndDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AllowedEndDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.IsValid)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.IsValid)
        </dd>

    </dl>
    <p>
        @Html.ActionLink("Start", "GetInfoAndStartTest", "Quiz", new { testingUrlGuid = Model.Guid }, null) |
        @Html.ActionLink("Edit", "GetInfoAndStartTest", "Quiz", new { testingUrlGuid = Model.Guid }, null) |
        @Html.ActionLink("Back to List", "Index")
    </p>

    <input type="button" name="StartButton" value="Start" id="StartButton" />
</div>
<div hidden id="timediv">Time to the end :<span id="time">@ViewBag.TTL</span> </div>

<div id="QuestionList">

</div>



@section scripts
{
    <script type="text/javascript">
        $(function() {
            $('#StartButton').on('click', function () {

                $.getJSON('@Url.Action("GetInfoAndStartTest")', {
                    testingUrlGuid: '@Model.Guid.ToString()'
                })
                    .done(function (data) {
                        console.log(data);
                    $.each(data.Questions, function (i, val) {
                        var QueDiv = $('<div />').html(val.Instance);
                        var OrList = $('<div />');
                        $.each(val.Answers, function (i, val) {
                            //console.log(val.Instance);
                            var di = $('<div />');
                            di.append($('<input />', { type: 'checkbox', value: val.Instance }));
                            di.append($('<label />').html(val.Instance));
                            OrList.append(di );
                        })
                        QueDiv.append(OrList);
                        $('#QuestionList').append(QueDiv);
                    });
                    $('#tmp').prop('hidden', true);
                    $('#timediv').prop('hidden', false);

                        var time = data.TestTimeLimit.TotalSeconds,
                    display = document.querySelector('#time');
                    startTimer(time, display);

                })
                .fail(function (jqxhr, textStatus, error) {
                    var err = textStatus + ", " + error;
                    console.log("Request Failed: " + err);
                });



            });
        })


        function startTimer(duration, display) {
        var timer = duration, minutes, seconds;
        setInterval(function () {
            minutes = parseInt(timer / 60, 10)
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;

            if (--timer < 0) {
                alert("EWRWER");
                timer = duration;
            }
        }, 1000);
    }


    </script>
}